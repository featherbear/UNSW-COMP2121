<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>COMP2121 Musings</title><link>/</link><description>Recent content on COMP2121 Musings</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Andrew Wong (z5206677)</copyright><lastBuildDate>Tue, 14 Apr 2020 22:39:45 +1000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>LCD Screen</title><link>/post/lcd-screen/</link><pubDate>Tue, 14 Apr 2020 22:39:45 +1000</pubDate><guid>/post/lcd-screen/</guid><description>The LCD Screen has its own microcontroller (MPU) that manages the low-level manipulation of the LCD panel itself.</description></item><item><title>Button and Key Input</title><link>/post/button-input/</link><pubDate>Tue, 14 Apr 2020 22:02:04 +1000</pubDate><guid>/post/button-input/</guid><description>The most basic type of input device is a (binary) switch - It is either pressed or released.</description></item><item><title>Number Systems and Encoding</title><link>/post/number-systems/</link><pubDate>Tue, 14 Apr 2020 17:58:45 +1000</pubDate><guid>/post/number-systems/</guid><description>Number Systems All numbers can be represented as sums of the powers of their base/radix.</description></item><item><title>Timers</title><link>/post/timers/</link><pubDate>Mon, 06 Apr 2020 22:28:10 +1000</pubDate><guid>/post/timers/</guid><description>Binary counters that can be used to measure time periods/speed/frequency, generate PWM signals, schedule real-time tasks, etc&amp;hellip;</description></item><item><title>External Interrupts</title><link>/post/external-interrupts/</link><pubDate>Mon, 06 Apr 2020 22:03:34 +1000</pubDate><guid>/post/external-interrupts/</guid><description>Triggered by the INT7:0 pins.</description></item><item><title>Watchdog Timer</title><link>/post/watchdog-timer/</link><pubDate>Mon, 06 Apr 2020 21:53:11 +1000</pubDate><guid>/post/watchdog-timer/</guid><description>The Watchdog Timer is a peripheral IO device in the ATMega2560.</description></item><item><title>Microwave Oven Simulator - Notes</title><link>/post/assignment/notes/</link><pubDate>Mon, 16 Mar 2020 11:57:11 +1100</pubDate><guid>/post/assignment/notes/</guid><description>Microwave Oven Simulator - Conceptual Design and Development Introduction Briefly explain what you trying to achieve Briefly explain key points in design and development Justify key design decisions you made Hardware Design How do the pins in the 2560 microcontroller connect to the external component (such as LEDs, LCD, motor etc)?</description></item><item><title>Microwave Oven Simulator - Report</title><link>/post/assignment/report/</link><pubDate>Mon, 16 Mar 2020 11:57:11 +1100</pubDate><guid>/post/assignment/report/</guid><description>Microwave Oven Simulator - Conceptual Design and Development Author: Andrew Wong (z5206677)</description></item><item><title>Interrupts</title><link>/post/interrupts/</link><pubDate>Wed, 11 Mar 2020 13:58:34 +1100</pubDate><guid>/post/interrupts/</guid><description>What is an Interrupt?</description></item><item><title>I/O Addressing</title><link>/post/io-addressing/</link><pubDate>Wed, 11 Mar 2020 13:21:12 +1100</pubDate><guid>/post/io-addressing/</guid><description>32 Registers 64 I/O Registers 416 External I/O Registers Internal SRAM External SRAM Memory Mapped I/O Advantages Simpler CPU design No special instructions for I/O acesss Disadvantages Reduce the amount of available space for applications Decoder needs to decode the entire memory space Separate I/O Extra control signals (IO/_M) is needed to prevent both memory and I/O from using the bus at the same time IO/!</description></item><item><title>Busses</title><link>/post/busses/</link><pubDate>Tue, 10 Mar 2020 15:07:11 +1100</pubDate><guid>/post/busses/</guid><description>What are busses?</description></item><item><title>Functions</title><link>/post/functions/</link><pubDate>Tue, 03 Mar 2020 15:24:56 +1100</pubDate><guid>/post/functions/</guid><description>0 ADD 1 MOV 2 LDI 3 BRANCH -2</description></item><item><title>Stack</title><link>/post/stack/</link><pubDate>Tue, 03 Mar 2020 15:18:11 +1100</pubDate><guid>/post/stack/</guid><description>0x0000 registers, io, maps 0x0200 v heap</description></item><item><title>Introduction</title><link>/post/program-structure/</link><pubDate>Tue, 25 Feb 2020 15:05:14 +1100</pubDate><guid>/post/program-structure/</guid><description>Case sensitive</description></item><item><title>AVR Instructions</title><link>/post/avr-instructions/</link><pubDate>Thu, 20 Feb 2020 00:01:25 +1100</pubDate><guid>/post/avr-instructions/</guid><description>AVR Instruction Format brge - BRanch if Greater than or Equal to.</description></item><item><title>Introduction</title><link>/post/introduction/</link><pubDate>Tue, 18 Feb 2020 15:12:39 +1100</pubDate><guid>/post/introduction/</guid><description>USER PERSPECTIVE Atmel AVR 8-bit RISC Architecture Reduced Instruction Set Computer Most instructions have a fixed length of 16-bits Most instructions take 1 clock cycle to execute Load-store memory access architecture All calculations performed on registers Two stage instruciton pipelining Internal program memory memory and data memory Peripherals - PWM, ADC, EEPROM, UART Registers 32 8-bit registers :: R0 -&amp;gt; R31 Most operations performed within the register Some instructions only work on R16 -&amp;gt; R31 (encoding limitation) Arithmetic Calculation Consider having to write the following equation in assembly language: z = 2x - xy - x^2</description></item></channel></rss>